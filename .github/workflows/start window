import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QLabel, QToolBar, QPushButton,
    QWidget, QVBoxLayout, QAction, QHBoxLayout, QFrame
)
from PyQt5.QtGui import QPixmap, QFont, QPalette, QLinearGradient, QColor, QBrush
from PyQt5.QtCore import Qt, QPropertyAnimation, QRect, QEasingCurve, QTimer

from main import DRDOGUI  # ensure this exists


class StartWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Welding Defect Detection System")
        self.setGeometry(50, 100, 1500, 900)
        self.setMinimumSize(1200, 700)

        # gradient background
        palette = QPalette()
        gradient = QLinearGradient(0, 0, 80, 900)
        gradient.setColorAt(0.0, QColor("#AFCEE8"))
        gradient.setColorAt(1.0, QColor("#E8EEF2"))
        palette.setBrush(QPalette.Window, QBrush(gradient))
        self.setPalette(palette)

        # Toolbar
        toolbar = QToolBar("Toolbar")
        toolbar.setStyleSheet("""
            QToolBar {
                background-color: rgba(255, 255, 255, 0.7);
                spacing: 10px;
                padding: 8px;
                border: none;
            }
            QToolButton {
                color: #222;
                font-weight: 600;
                font-size: 15px;
                padding: 6px 14px;
            }
            QToolButton:hover {
                background-color: rgba(200, 200, 200, 0.3);
                border-radius: 5px;
            }
        """)
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        sections = ["File", "extra option", "Make report", "Tools", "Help"]
        for name in sections:
            toolbar.addAction(QAction(name, self))

        toolbar.addSeparator()

        detect_btn = QPushButton("Launch Detector")
        detect_btn.setStyleSheet("""
            QPushButton {
                background-color: #0066cc;
                color: white;
                font-weight: bold;
                border-radius: 8px;
                padding: 8px 18px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #3385ff;
                transform: scale(1.03);
            }
        """)
        detect_btn.clicked.connect(self.open_main_page)
        toolbar.addWidget(detect_btn)

        # Central area
        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
        layout.setAlignment(Qt.AlignCenter)

        # Card Frame
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: rgba(255, 255, 255, 0.2);
                border-radius: 80px;
                padding: 40px;
                border: 0px solid rgba(0, 0, 0, 1.8);
            }
        """)
        card_layout = QVBoxLayout(card)
        card_layout.setAlignment(Qt.AlignCenter)

        # Logo
        self.logo_label = QLabel()
        pixmap = QPixmap("drdologo.webp")
        self.logo_label.setPixmap(pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.logo_label.setAlignment(Qt.AlignCenter)

        # Title
        title = QLabel("Welding Defect Detection System")
        title.setFont(QFont("Segoe UI", 28, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #0C2340;")

        # Subtitle
        subtitle = QLabel("Desktop GUI for Welding Defect Detection")
        subtitle.setFont(QFont("Segoe UI", 14))
        subtitle.setStyleSheet("color: #333;")
        subtitle.setAlignment(Qt.AlignCenter)

        card_layout.addWidget(self.logo_label)
        card_layout.addWidget(title)
        card_layout.addWidget(subtitle)

        layout.addWidget(card)

        # Footer
        footer = QLabel("DRDO Project")
        footer.setAlignment(Qt.AlignRight)
        footer.setStyleSheet("color: #444; font-size: 12px; margin-top: 40px;")

        layout.addWidget(footer)
        self.setCentralWidget(central_widget)

  
    def open_main_page(self):
        self.main_window = DRDOGUI()
        self.main_window.show()
        self.close()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = StartWindow()
    window.show()
    sys.exit(app.exec())
